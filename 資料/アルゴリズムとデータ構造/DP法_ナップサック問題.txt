import java.util.*;

public class Main {

    

    static int N;

    static int W;


    static int[] w;

    static int[] v;

    static int[][] dp;


    public static void main(String[] args) throws Exception {

        Scanner sc = new Scanner(System.in);

        N = sc.nextInt();

        W = sc.nextInt();

        w = new int[N];

        v = new int[N];

        dp = new int[N+1][W+1];


        for(int i = 0; i <N; i++){

            w[i] = sc.nextInt();

            v[i] = sc.nextInt();

        }


        for(int i = 0; i <N+1; i++){

            for(int j = 0; j <W+1; j++){

                dp[i][j] = -1;

            }

        }

        solve();

    }

    
    static int rec(int i, int j){

        if(dp[i][j] >= 0){

            return dp[i][j];

        }

        int res;

        if(i == N){

            res = 0;

        }else if(j < w[i]){

            res = rec(i+1,j);

        }else{

            res = Math.max(rec(i +1, j),rec(i+1,j-w[i]) + v[i]);

        }

        dp[i][j] = res;

        return dp[i][j];

    }

    
    static void solve(){

        System.out.println(rec(0,W));

    }

}


/*
以下、コンパイルエラーとなる実装。
mainメソッドの中で、変数を初期化するつもりが宣言までし行ったので、エラーを吐いていた。
なお、配列dp[][]で[N+1][W+1]としたのは、N+1は品物のカウントが0〜4の５つであること、
W+1は重量のカウントも5〜0の6種あるため。

import java.util.*;

public class Main {

    

    static int N;

    static int W;

    static int[] w;

    static int[] v;

    static int[][] dp;



    public static void main(String[] args) throws Exception {


        Scanner sc = new Scanner(System.in);

        N = sc.nextInt();

        W = sc.nextInt();

        int[] w = new int[N];

        int[] v = new int[N];

        int[][] dp = new int[N+1][W+1];


        for(int i = 0; i <N; i++){

            w[i] = sc.nextInt();

            v[i] = sc.nextInt();

        }


        for(int i = 0; i <N+1; i++){

            for(int j = 0; j <W+1; j++){

                dp[i][j] = -1;

            }

        }

        solve();

    }


    
    static int rec(int i, int j){


        if(dp[i][j] >= 0) return dp[i][j];


        int res;

        if(i == N){

            res = 0;

        }else if(j < w[i]){

            res = rec(i+1,j);

        }else{

            res = Math.max(rec(i +1, j),rec(i+1,j-w[i]) + v[i]);

        }

        dp[i][j] = res;

        return dp[i][j];

    }

    
    static void solve(){

        System.out.println(rec(0,W));

    }

}

*/